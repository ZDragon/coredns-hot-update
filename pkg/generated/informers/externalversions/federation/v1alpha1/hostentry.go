/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	federationv1alpha1 "github.com/ZDragon/coredns-hot-update/pkg/apis/federation/v1alpha1"
	versioned "github.com/ZDragon/coredns-hot-update/pkg/generated/clientset/versioned"
	internalinterfaces "github.com/ZDragon/coredns-hot-update/pkg/generated/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/ZDragon/coredns-hot-update/pkg/generated/listers/federation/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// HostEntryInformer provides access to a shared informer and lister for
// HostEntries.
type HostEntryInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.HostEntryLister
}

type hostEntryInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewHostEntryInformer constructs a new informer for HostEntry type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewHostEntryInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredHostEntryInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredHostEntryInformer constructs a new informer for HostEntry type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredHostEntryInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.FederationV1alpha1().HostEntries(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.FederationV1alpha1().HostEntries(namespace).Watch(context.TODO(), options)
			},
		},
		&federationv1alpha1.HostEntry{},
		resyncPeriod,
		indexers,
	)
}

func (f *hostEntryInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredHostEntryInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *hostEntryInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&federationv1alpha1.HostEntry{}, f.defaultInformer)
}

func (f *hostEntryInformer) Lister() v1alpha1.HostEntryLister {
	return v1alpha1.NewHostEntryLister(f.Informer().GetIndexer())
}
