/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/ZDragon/coredns-hot-update/pkg/apis/networking/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederationDNSSliceLister helps list FederationDNSSlices.
// All objects returned here must be treated as read-only.
type FederationDNSSliceLister interface {
	// List lists all FederationDNSSlices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FederationDNSSlice, err error)
	// FederationDNSSlices returns an object that can list and get FederationDNSSlices.
	FederationDNSSlices(namespace string) FederationDNSSliceNamespaceLister
	FederationDNSSliceListerExpansion
}

// federationDNSSliceLister implements the FederationDNSSliceLister interface.
type federationDNSSliceLister struct {
	indexer cache.Indexer
}

// NewFederationDNSSliceLister returns a new FederationDNSSliceLister.
func NewFederationDNSSliceLister(indexer cache.Indexer) FederationDNSSliceLister {
	return &federationDNSSliceLister{indexer: indexer}
}

// List lists all FederationDNSSlices in the indexer.
func (s *federationDNSSliceLister) List(selector labels.Selector) (ret []*v1.FederationDNSSlice, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FederationDNSSlice))
	})
	return ret, err
}

// FederationDNSSlices returns an object that can list and get FederationDNSSlices.
func (s *federationDNSSliceLister) FederationDNSSlices(namespace string) FederationDNSSliceNamespaceLister {
	return federationDNSSliceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederationDNSSliceNamespaceLister helps list and get FederationDNSSlices.
// All objects returned here must be treated as read-only.
type FederationDNSSliceNamespaceLister interface {
	// List lists all FederationDNSSlices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FederationDNSSlice, err error)
	// Get retrieves the FederationDNSSlice from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.FederationDNSSlice, error)
	FederationDNSSliceNamespaceListerExpansion
}

// federationDNSSliceNamespaceLister implements the FederationDNSSliceNamespaceLister
// interface.
type federationDNSSliceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederationDNSSlices in the indexer for a given namespace.
func (s federationDNSSliceNamespaceLister) List(selector labels.Selector) (ret []*v1.FederationDNSSlice, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FederationDNSSlice))
	})
	return ret, err
}

// Get retrieves the FederationDNSSlice from the indexer for a given namespace and name.
func (s federationDNSSliceNamespaceLister) Get(name string) (*v1.FederationDNSSlice, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("federationdnsslice"), name)
	}
	return obj.(*v1.FederationDNSSlice), nil
}
