/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/ZDragon/coredns-hot-update/pkg/apis/networking/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederationDNSLister helps list FederationDNSs.
// All objects returned here must be treated as read-only.
type FederationDNSLister interface {
	// List lists all FederationDNSs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FederationDNS, err error)
	// FederationDNSs returns an object that can list and get FederationDNSs.
	FederationDNSs(namespace string) FederationDNSNamespaceLister
	FederationDNSListerExpansion
}

// federationDNSLister implements the FederationDNSLister interface.
type federationDNSLister struct {
	indexer cache.Indexer
}

// NewFederationDNSLister returns a new FederationDNSLister.
func NewFederationDNSLister(indexer cache.Indexer) FederationDNSLister {
	return &federationDNSLister{indexer: indexer}
}

// List lists all FederationDNSs in the indexer.
func (s *federationDNSLister) List(selector labels.Selector) (ret []*v1.FederationDNS, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FederationDNS))
	})
	return ret, err
}

// FederationDNSs returns an object that can list and get FederationDNSs.
func (s *federationDNSLister) FederationDNSs(namespace string) FederationDNSNamespaceLister {
	return federationDNSNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederationDNSNamespaceLister helps list and get FederationDNSs.
// All objects returned here must be treated as read-only.
type FederationDNSNamespaceLister interface {
	// List lists all FederationDNSs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FederationDNS, err error)
	// Get retrieves the FederationDNS from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.FederationDNS, error)
	FederationDNSNamespaceListerExpansion
}

// federationDNSNamespaceLister implements the FederationDNSNamespaceLister
// interface.
type federationDNSNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederationDNSs in the indexer for a given namespace.
func (s federationDNSNamespaceLister) List(selector labels.Selector) (ret []*v1.FederationDNS, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FederationDNS))
	})
	return ret, err
}

// Get retrieves the FederationDNS from the indexer for a given namespace and name.
func (s federationDNSNamespaceLister) Get(name string) (*v1.FederationDNS, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("federationdns"), name)
	}
	return obj.(*v1.FederationDNS), nil
}
