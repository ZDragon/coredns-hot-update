/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ZDragon/coredns-hot-update/pkg/apis/federation/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HostEntriesSliceLister helps list HostEntriesSlices.
// All objects returned here must be treated as read-only.
type HostEntriesSliceLister interface {
	// List lists all HostEntriesSlices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostEntriesSlice, err error)
	// HostEntriesSlices returns an object that can list and get HostEntriesSlices.
	HostEntriesSlices(namespace string) HostEntriesSliceNamespaceLister
	HostEntriesSliceListerExpansion
}

// hostEntriesSliceLister implements the HostEntriesSliceLister interface.
type hostEntriesSliceLister struct {
	indexer cache.Indexer
}

// NewHostEntriesSliceLister returns a new HostEntriesSliceLister.
func NewHostEntriesSliceLister(indexer cache.Indexer) HostEntriesSliceLister {
	return &hostEntriesSliceLister{indexer: indexer}
}

// List lists all HostEntriesSlices in the indexer.
func (s *hostEntriesSliceLister) List(selector labels.Selector) (ret []*v1alpha1.HostEntriesSlice, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostEntriesSlice))
	})
	return ret, err
}

// HostEntriesSlices returns an object that can list and get HostEntriesSlices.
func (s *hostEntriesSliceLister) HostEntriesSlices(namespace string) HostEntriesSliceNamespaceLister {
	return hostEntriesSliceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HostEntriesSliceNamespaceLister helps list and get HostEntriesSlices.
// All objects returned here must be treated as read-only.
type HostEntriesSliceNamespaceLister interface {
	// List lists all HostEntriesSlices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostEntriesSlice, err error)
	// Get retrieves the HostEntriesSlice from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HostEntriesSlice, error)
	HostEntriesSliceNamespaceListerExpansion
}

// hostEntriesSliceNamespaceLister implements the HostEntriesSliceNamespaceLister
// interface.
type hostEntriesSliceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HostEntriesSlices in the indexer for a given namespace.
func (s hostEntriesSliceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HostEntriesSlice, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostEntriesSlice))
	})
	return ret, err
}

// Get retrieves the HostEntriesSlice from the indexer for a given namespace and name.
func (s hostEntriesSliceNamespaceLister) Get(name string) (*v1alpha1.HostEntriesSlice, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hostentriesslice"), name)
	}
	return obj.(*v1alpha1.HostEntriesSlice), nil
}
