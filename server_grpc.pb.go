// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hotupdate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DNSUpdaterClient is the client API for DNSUpdater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DNSUpdaterClient interface {
	Add(ctx context.Context, in *RequestDNSAdd, opts ...grpc.CallOption) (*ResponseStatus, error)
	Remove(ctx context.Context, in *RequestDNSRemove, opts ...grpc.CallOption) (*ResponseStatus, error)
}

type dNSUpdaterClient struct {
	cc grpc.ClientConnInterface
}

func NewDNSUpdaterClient(cc grpc.ClientConnInterface) DNSUpdaterClient {
	return &dNSUpdaterClient{cc}
}

func (c *dNSUpdaterClient) Add(ctx context.Context, in *RequestDNSAdd, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/hotupdate.DNSUpdater/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSUpdaterClient) Remove(ctx context.Context, in *RequestDNSRemove, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/hotupdate.DNSUpdater/remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSUpdaterServer is the server API for DNSUpdater service.
// All implementations must embed UnimplementedDNSUpdaterServer
// for forward compatibility
type DNSUpdaterServer interface {
	Add(context.Context, *RequestDNSAdd) (*ResponseStatus, error)
	Remove(context.Context, *RequestDNSRemove) (*ResponseStatus, error)
	mustEmbedUnimplementedDNSUpdaterServer()
}

// UnimplementedDNSUpdaterServer must be embedded to have forward compatible implementations.
type UnimplementedDNSUpdaterServer struct {
}

func (UnimplementedDNSUpdaterServer) Add(context.Context, *RequestDNSAdd) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDNSUpdaterServer) Remove(context.Context, *RequestDNSRemove) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedDNSUpdaterServer) mustEmbedUnimplementedDNSUpdaterServer() {}

// UnsafeDNSUpdaterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DNSUpdaterServer will
// result in compilation errors.
type UnsafeDNSUpdaterServer interface {
	mustEmbedUnimplementedDNSUpdaterServer()
}

func RegisterDNSUpdaterServer(s grpc.ServiceRegistrar, srv DNSUpdaterServer) {
	s.RegisterService(&DNSUpdater_ServiceDesc, srv)
}

func _DNSUpdater_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDNSAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSUpdaterServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotupdate.DNSUpdater/add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSUpdaterServer).Add(ctx, req.(*RequestDNSAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSUpdater_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDNSRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSUpdaterServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotupdate.DNSUpdater/remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSUpdaterServer).Remove(ctx, req.(*RequestDNSRemove))
	}
	return interceptor(ctx, in, info, handler)
}

// DNSUpdater_ServiceDesc is the grpc.ServiceDesc for DNSUpdater service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DNSUpdater_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hotupdate.DNSUpdater",
	HandlerType: (*DNSUpdaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _DNSUpdater_Add_Handler,
		},
		{
			MethodName: "remove",
			Handler:    _DNSUpdater_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
